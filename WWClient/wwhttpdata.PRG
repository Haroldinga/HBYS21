************************************************************************
*PROCEDURE wwHTTPData
**********************
***  Function: Responsible for serving data generically over HTTP
***      Pass: loCGI    -   wwCGI object
***            loServer -   wwServer/wwOLEServer object
*************************************************************************
LPARAMETER loServer
LOCAL loProcess

#INCLUDE WCONNECT.H

*** Now create a process object.
loProcess=CREATEOBJECT("wwHTTPDataProcess",loServer)

IF VARTYPE(loProcess)#"O"
   *** All we can do is return...
   WAIT WINDOW NOWAIT "Unable to create Process object..."
   RETURN .F.
ENDIF

*** Call the Process Method that handles the request
loProcess.Process

RETURN

*************************************************************
DEFINE CLASS wwHTTPDataProcess AS wwProcess
*************************************************************
***    Author: Rick Strahl
***  Modified: 05/31/96
***  Function: This class handles the requests generated by
***            the sample HTML form and its results. The
***            class implementation makes error and output 
***            doc handling much cleaner.
***
***            Subclassed from a generic wwProcess class
***            handler which provides error handling and 
***            HTML and CGI object setup.
*************************************************************

************************************************************************
* wwScriptMaps :: Process
***************************
***  Function: This is the callback program file that handles
***            processing a CGI request
************************************************************************
FUNCTION Process
LOCAL lcParameter

Request = THIS.oRequest
Response = THIS.oResponse

lcParameter=UPPER(Request.QueryString(2)) && Optional CGI parameters following EXE name

DO CASE
   *** Add any 'invalid' method calls here
   CASE INLIST(lcParameter,"PROCESS","LOAD","INIT","DESTROY")
      THIS.ErrorMsg("Invalid Method: " +lcParameter,"This method name is illegal...")

   *** NOTE:    GENERIC ROUTING BY PARAMETER NAME
   CASE !EMPTY(lcParameter) AND PEMSTATUS(THIS,lcParameter,5)
      =EVALUATE("THIS."+lcParameter+"()")

   OTHERWISE
     THIS.oResponse.Sendln("Error: Unhandled Request for wwHTTPDataProcess Object.")

ENDCASE

RETURN .T.

************************************************************************
* wwHTTPDataProcess :: Execute
*********************************
***  Function: Generic Execute request handler routine that can
***            be used to pull data from the wire.
***            Typically called from a wwHTTPData client in VFP
************************************************************************
FUNCTION Execute

*** Check for validation here

*** Authentication is optional
*** Supported values in the INI -  Any        -  Any Authorized user
***                                Username   -  A specific user - must match Authenticated User
***                                ""         -  None - no Authentication
*lcAuthUser = Request.GetWCINIValue("AdminAccount")

*** Create Data Object and call Server Side Execute method (wrapper for Process Method)
loData = CREATE("wwHTTPData")

*** Default allows only SELECTS
loData.cAllowedCommands = "select,execute,"

*** Pass Restraints here
loData.S_Execute(THIS)  &&,lcAuthUser)

ENDFUNC
* wwHTTPDataProcess :: Execute

************************************************************************
* wwHTTPDataprocess :: SendFile
*********************************
***  Function: Generic File upload utility
************************************************************************
FUNCTION SendFile

lcAuthUser = THIS.GetAppSetting("AuthUser","wwHTTPData")

loFile = CREATE("wwHTTPFile")
loFile.cForcedSavePath = SYS(5) + CURDIR() + "Uploads\"
loFile.S_SendFile(THIS,lcAuthUser)

ENDFUNC
* wwHTTPDataprocess :: SendFile

************************************************************************
* wwHTTPData :: HTTPCOM
*********************************
***  Function: Remote COM object execution over HTTPRun a SQL Statement on the server
***            Expects a request generated from wwHTTPData::Execute()
************************************************************************
FUNCTION HTTPCOM

*** Check for validation here

** Authentication is optional
*** Supported values in the INI -  Any        -  Any Authorized user
***                                Username   -  A specific user - must match Authenticated User
***                                ""         -  None - no Authentication
*lcAuthUser = "wcuser"  
lcAuthUser = THIS.GetAppSetting("AuthUser","wwHTTPData")

*** Create Data Object and call Server Side Execute method (wrapper for Process Method)
loCOM = CREATE("wwHTTPCom")

*** Block out any harmful objects - VFP's DELETE FILE and ERASE commands are bad!
*** Windows Scripting Host objects are automatically blocked whenever
*** adding exclusions make sure to add them to the existing ones!
* loCOM.cExcludedObjects = "visualfoxpro.application,"  + loCOM.cObjectExclusions

#IF WWC_DEMO
	*** For demo safety reasons and because I want to show VFP code here
	*** I'll add this optional code to pre-parse the incoming XML and check
	*** offending method calls. Remove this code if you don't use the VFP COM
	*** object and exclude it with the cObjectExclusions parameter

	*** Specify only those objects that you do allow
	loCOM.cAllowedObjects = "visualfoxpro.application,wwbanner.aspbanner,wccomdemo.wccomtools"

	lcXML = Request.FormXML()
	lcMethod = Extract(lcXML,"<method>","</method>")
	If ATC("DELETE ",lcMethod) >0 or ATC("ERASE ",lcMethod) > 0 OR ATC("MESSAGEBOX",lcMethod) > 0
	   Response.ContentTypeHeader("text/xml")
	   Response.Write( loCOM.CreateErrorXML("MESSAGEBOX, ERASE and DELETE are not allowed for security reasons.",-1) )
	   RETURN
	ENDIF   
#ENDIF

loCOM.S_Execute(THIS)

ENDFUNC
* wwHTTPDataProcess :: Execute

ENDDEFINE
